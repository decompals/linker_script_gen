name: Build and upload Rust crate

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]

jobs:
  check_fmt:
    name: Check format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Check format
        run: cargo fmt --check

  check_clippy:
    name: Check clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

    # run_tests:
  #   name: Run tests
  #   runs-on: ubuntu-latest
# 
  #   steps:
  #     - name: Checkout reposistory
  #       uses: actions/checkout@v4
# 
  #     - name: Setup Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true
# 
  #     - name: Run tests
  #       run: cargo test --workspace


  release:
    name: release artifact for ${{ matrix.builder.target }}
    runs-on: ${{ matrix.builder.runner }}
    needs: [check_fmt, check_clippy] # run_tests

    strategy:
      fail-fast: false
      matrix:
        builder: [
          {
            name: windows,
            target: x86_64-pc-windows-gnu,
            runner: windows-2019
          },
          {
            name: windows,
            target: x86_64-pc-windows-msvc,
            runner: windows-2019
          },
          {
            name: mac,
            target: x86_64-apple-darwin,
            runner: macos-12
          },
          {
            name: mac,
            target: aarch64-apple-darwin,
            runner: macos-13-xlarge
          },
          {
            name: linux,
            target: x86_64-unknown-linux-musl,
            runner: ubuntu-20.04
          },
          {
            name: linux,
            target: x86_64-unknown-linux-gnu,
            runner: ubuntu-20.04
          }
        ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.builder.target }}

      - name: Build cli
        run: cargo build --release --target ${{ matrix.builder.target }}

      - name: Print built files
        run: |
          dir target/${{ matrix.target }}/release

      - name: Move files for packaging (unix)
        if: matrix.builder.name == 'linux' || matrix.builder.name == 'mac'
        run: |
          mkdir -p package/
          cp target/${{ matrix.builder.target }}/release/slinky-cli package/
          cp LICENSE package/slinky-cli.LICENSE
          cp README.md package/slinky-cli.README.md
          dir package

      - name: Move files for packaging (windows)
        if: matrix.builder.name == 'windows'
        run: |
          mkdir -p package/
          Copy-Item target/${{ matrix.builder.target }}/release/slinky-cli.exe package/
          Copy-Item LICENSE package/slinky-cli.LICENSE
          Copy-Item README.md package/slinky-cli.README.md
          dir package

      - name: Package .tar.gz
        run: |
          cd package && tar -czf ../slinky-cli-${{ matrix.builder.target }}.tar.gz *

      - name: Upload .tar.gz artifact
        uses: actions/upload-artifact@v3
        with:
          name: slinky-cli-${{ matrix.builder.target }}
          path: |
            slinky-cli-${{ matrix.builder.target }}.tar.gz
          if-no-files-found: error

      - name: Publish .tar.gz release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.archive == 'tar.gz'
        with:
          files: slinky-cli-${{ matrix.builder.target }}.tar.gz

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [check_fmt, check_clippy] # run_tests

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Rust package
        run: cargo build --release --workspace

      - name: Publish slinky dry run
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: cargo publish --package slinky --dry-run

      - name: Upload slinky crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish --package slinky --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Upload slinky-cli crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish --package slinky-cli --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
